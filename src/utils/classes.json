{
    "classes" : [
        {
            "myComment": "To jest pojedyncza strona, czyli page 0",
            "page": [
                {
                    "header": "Java OOP",
                    "description": "{OOP} oznacza {Object-Oriented Programming}.\nProgramowanie proceduralne polega na pisaniu procedur lub metod, które wykonują operacje na danych, podczas gdy programowanie obiektowe polega na tworzeniu obiektów, które zawierają zarówno dane, jak i metody.\nOOP ma kilka zalet nad programowaniem proceduralnym:\n -OOP jest łatwiejszy i szybszy do wykonania\n -OOP zapewnia czystą strukturę programu\n -OOP pomaga utrzymać kod Javy {DRY (Don't Repeat Yourself)} i sprawia, że kod jest łatwiejszy w zarządzaniu, modifikowaniu i debugowaniu\n -OOP umożliwia w pełni używalną aplikację z mniejszą ilością kodu i krótszym czasem produkcji\nDRY: Zasada polega na ograniczeniu powtarzania kodu. Powinieneś wyodrębnić kody, które są wspólne dla aplikacji i umieścić je w jednym miejscu i ponownie wykorzystać zamiast powtarzać.",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "Czym są klasy i obiekty w Javie?",
                    "description": "Klasy i obiekty są głownymi aspektami OOP.\nKlasa jest szablonem obiektu, a obiekt jest instancją klasy.\nGdy tworzone są poszczególne obiekty, dziedziczą one wszystkie zmienne i metody z klasy.\nSpójrz na poniższą ilustrację, żeby zobaczyć różnicę między klasą i obiektem.",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Klasy i obiekty w Javie",
                    "description": "Java jest obiektowym językiem programowania.\nWszystko w Javie jest powiązane z {klasami} i {obiektami}, wraz z ich atrybutami i metodami. Na przykład: w prawdziwym życiu samochód jest przedmiotem. Samochód ma atrybuty, takie jak waga i kolor, oraz metody, takie jak napęd i hamulec.\n Klasa przypomina konstruktor obiektów lub „plan” tworzenia obiektów.",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "Tworzenie klasy",
                    "description": "Aby utworzyć klasę użyj {class}.",
                    "code": "public class Main {\n  int x = 5;\n}",
                    "output": "",
                    "codeDescription": "Pamiętaj, że nazwa klasy powinna zaczynać się z dużej litery i powinna nazywać się tak samo jak plik w którym się znajduje"
                },
                {
                    "header": "Tworzenie obiektów",
                    "description": "W Javie {obiekt} tworzony jest z {klasy}. Stworzyliśmy już klasę o nazwie {Main}, więc teraz możemy jej używać do tworzenia obiektów.\nAby utworzyć obiekt {Main}, podaj nazwę klasy, po której następuje nazwa obiektu i użyj {new}",
                    "code": "public class Main {\n  int x = 5;\n\npublic static void main(String[] args) {\n    Main myObj = new Main();\n    Main myObj2 = new Main();\n    System.out.println(myObj.x);\n    System.out.println(myObj2.x);\n  }\n}",
                    "output": "5\n",
                    "codeDescription": ""
                },
                {
                    "header": "Używanie kilku klas",
                    "description": "Możesz także utworzyć obiekt klasy i uzyskać do niego dostęp w innej klasie. Jest to często używane w celu lepszej organizacji klas (jedna klasa ma wszystkie atrybuty i metody, podczas gdy druga klasa przechowuje metodę main() (kod do wykonania)).\n",
                    "code": "class Second {\npublic static void main(String[] args) {\n    Main myObj = new Main();\n    System.out.println(myObj.x);\n  }\n",
                    "output": "5",
                    "codeDescription": "W klasie Second utworzony został obiekt klasy Main z poprzednich przykładów."
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Atrybuty klasy",
                    "description": "{Atrybutami} klasy są {zmienne} wewnątrz klasy (nazywane również {polami}).\nDostęp do {atrybutów} można uzyskać, tworząc obiekt klasy i używając kropki {.}\nW ten sam sposób możesz modyfikować {pola} klasy.",
                    "code": "public class Main {\n  int x = 10;\n  final int y = 5;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    System.out.println(myObj.x);\n    myObj.x = 40;\n    System.out.println(myObj.x);\n  }\n}",
                    "output": "10\n40",
                    "codeDescription": "Zmiennej {final} nie można modyfikować, taka zmienna jest przydatna do przetrzymywania tej samej wartości na przykład Pi (3.14159..)    "
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Metody statyczne i publiczne",
                    "description": "Często będziesz widzieć programy Java, które mają {statyczne} lub {publiczne} atrybuty i metody.\nMetoda {statyczna} oznacza, że można uzyskać do niej dostęp bez tworzenia obiektu klasy, w przeciwieństwie do metod {publicznych}, do której dostęp mają tylko obiekty:",
                    "code": "public class Main {\n  static void myStaticMethod() {\n    System.out.println(\"Statyczna metoda\");\n  }\n\n    public void myPublicMethod() {\n    System.out.println(\"Publiczna metoda\");\n  }\n\n  public static void main(String[] args) {\n    myStaticMethod();\n    // myPublicMethod(); To spowodowałoby błąd\n\n    Main myObj = new Main();\n    myObj.myPublicMethod();\n  }\n}",
                    "output": "Statyczna metoda\nPubliczna metoda",
                    "codeDescription": ""
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Konstruktory",
                    "description": "{Konstruktor} w Javie to specjalna metoda używana do inicjowania obiektów. {Konstruktor} jest wywoływany, gdy tworzony jest obiekt klasy. Można go użyć do ustawienia początkowych wartości {atrybutów} obiektu:",
                    "code": "public class Main {\n  int x;\n\n  public Main() {\n    x = 5;\n  }\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    System.out.println(myObj.x);\n  }\n}",
                    "output": "5",
                    "codeDescription": "Nazwa konstruktora musi być taka sama jak nazwa klasy i nie może nic zwracać.\nKontruktor jest wywoływany przy tworzeniu obiektu ({Main myObj = new Main()})"
                },
                {
                    "header": "Konstruktor parametrowy",
                    "description": "Konstruktory mogą przyjmować parametry, które są używane do inizcjalizowania atrybutów",
                    "code": "public class Main {\n  int x;\n\n  public Main(int y) {\n    x = y;\n  }\n\n  public static void main(String[] args) {\n    Main myObj = new Main(5);\n    System.out.println(myObj.x);\n  }\n}",
                    "output": "5",
                    "codeDescription": ""
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Modyfikatory",
                    "description": "{public} jest {modyfikatorem} dostępu, co oznacza, że służy do ustawiania poziomu dostępu dla {klas}, {atrybutów}, {metod} i {konstruktorów}.\n{Modyfikatory} dzielą się na 2 grupy:\n- {Modyfikatory dostępu} kontroluja poziom dostępu\n- {Modyfikatory bez dostępu} nie kontrolują poziomu dostępu, ale zapewniają inną funkcjonalność",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "Modyfikatory dostępu",
                    "description": "Dla {klas} stosuje się {public} lub {default}\n- {public} - klasa jest dostępna dla wszystkich klas\n- {default} - klasa jest dostępna dla klas w tym samym pakiecie (Jest to używane, gdy nie zdefiniujesz modyfikatora)",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "",
                    "description": "Dla {atrybutów}, {metod}, i {konstruktorów} korzysta się z {public}, {private}, {protected} i {default}.\n- {public} - kod jest dostępny dla wszystkich klas\n- {private} - kod jest dostępny tylko w obrębie zadeklarowanej klasy\n- {protected} - kod jest dostępny w tym samym pakiecie i podklasach\n- {default} - kod jest dostępny dla klas w tym samym pakiecie (Jest to używane, gdy nie zdefiniujesz modyfikatora)",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "Modyfikatory bez dostępu",
                    "description": "Dla {klas} stosuje się {final} lub {abstrakt}\n- {final} - klasa nie może być dziedziczona przez inne klasy\n - {abstract} - Klasy nie można używać do tworzenia obiektów (aby uzyskać dostęp do klasy abstrakcyjnej, należy ją odziedziczyć z innej klasy)\n",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "",
                    "description": "Dla {atrybutów} i {metod} korzysta się z {final}, {static}, {abstract}, {transient}, {synchronized} i {volatile}\n- {final} - atrybuty i metody nie mogą być modyfikowane\n- {static} - atrybuty i metody należą do klasy, a nie do obiektu\n- {abstract} - można go używać tylko w klasie abstrakcyjnej i można go używać tylko w metodach. Metoda nie ma treści, na przykładzie abstrakcyjnej metody {void run()}, ciało jest dostarczane przez podklasę\n - {transient} - Atrybuty i metody są pomijane podczas serializacji zawierającego je obiektu\n- {synchronized} - dostęp do metod może uzyskać tylko jeden wątek na raz\n - {volatile} - Wartość atrybutu nie jest buforowana lokalnie w wątku i jest zawsze odczytywana z „pamięci głównej”",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Enkapsulacja",
                    "description": "Znaczeniem {enkapsulacji} jest zapewnienie, że \"wrażliwe\" dane są ukryte przed użytkownikami. Aby to zrobić musisz:\n- zadeklarować atrybuty jako {private}\n- utworzyć publiczne {get} i {set} metody, aby mieć dostęp do tych pól",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "Get i Set",
                    "description": "Metoda {get} zwraca wartość zmiennej, a metoda {set} ustawia tę wartość.\nSkładnia obu jest taka, że zaczynają się od {get} lub {set}, po którym następuje nazwa zmiennej, której pierwsza litera jest duża",
                    "code": "public class Person {\n  private String name;\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String newName) {\n    this.name = newName;\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Person myObj = new Person();\n    myObj.setName(\"Jan\");\n    System.out.println(myObj.getName());\n  }\n}",
                    "output": "Jan",
                    "codeDescription": "Metoda {get} zwraca wartość nazwy zmiennej.\nMetoda {set} pobiera parametr (newName) i przypisuje go do zmiennej {name}. Słowo {this} jest używane w odniesieniu do bieżącego obiektu.\nPonieważ jednak zmienna {name} jest zadeklarowana jako {private}, nie możemy uzyskać do niej dostępu spoza tej klasy:"
                },
                {
                    "header": "Dlaczego enkapsulacja?",
                    "description": "- Lepsza kontrola nad atrybutami i metodami klas\n- Atrybuty klasy mogą być ustawione jako tylko do odczytu (jeśli używasz tylko metody {get}) lub tylko do zapisu (jeśli używasz tylko metody {set})\n- Programista może zmienić jedną część kodu bez wpływu na inne części\n - Zwiększone bezpieczeństwo danych",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Pakiety i API",
                    "description": "{Pakiet} w Javie służy do grupowania powiązanych klas. Pomyśl o tym jak o folderze w katalogu plików.\nUżywamy {pakietów}, aby uniknąć konfliktów nazw i napisać lepszy, łatwiejszy w utrzymaniu kod. {Pakiety} dzielą się na dwie kategorie:\n- {Wbudowane pakiety} (pakiety z Java API)\n - {Pakiety zdefiniowane} przez użytkownika",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "Wbudowane pakiety",
                    "description": "{Java API} to {biblioteka} wstępnie napisanych klas, z których można korzystać bezpłatnie, zawarta w środowisku Java Development Environment.\n{Biblioteka} zawiera komponenty do zarządzania danymi wejściowymi, programowania baz danych i wiele, wiele więcej.\n{Biblioteka} jest podzielona na {pakiety} i {klasy}. Oznacza to, że możesz zaimportować pojedynczą {klasę} lub cały {pakiet} zawierający wszystkie klasy należące do określonego pakietu.\nAby skorzystać z {klasy} lub {pakietu} z biblioteki, należy użyć {import}",
                    "code": "import package.name.Class;   // Import pojedynczej klasy\nimport package.name.*;   // Import całego pakietu",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "Import klasy",
                    "description": "Jeśli znajdziesz klasę, której chcesz użyć, na przykład klasę {Scanner}, która służy do uzyskiwania danych wejściowych od użytkownika.\nAby skorzystać z klasy {Scanner}, utwórz obiekt tej klasy i użyj dowolnej z dostępnych metod znajdujących się w dokumentacji klasy {Scanner}. \nMetoda {nextLine()}, która służy do odczytania całej linii",
                    "code": "import java.util.Scanner;\n\nclass MyClass {\n  public static void main(String[] args) {\n    Scanner myObj = new Scanner(System.in);\n    System.out.println(\"Enter username\");\n\n    String userName = myObj.nextLine();\n    System.out.println(\"Username is: \" + userName);\n  }\n}",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "Pakiety zdefiniowane",
                    "description": "Aby utworzyć własny {pakiet}, musisz zrozumieć, że Java używa do ich przechowywania katalogu systemu plików. Podobnie jak foldery na komputerze.\nAby utworzyć {pakiet} użyj {package}",
                    "code": "package mypack;\n\nclass MyPackageClass {\n  public static void main(String[] args) {\n    System.out.println(\"To jest pakiet\");\n  }\n}",
                    "output": "",
                    "codeDescription": "{package mypack} : {mypack} to folder/katalog w którym znajduje się klasa {MyPackageClass}"
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Dziedziczenie w Javie",
                    "description": "W Javie możliwe jest {dziedziczenie} atrybutów i metod z jednej klasy do drugiej. Dzielimy „koncepcję dziedziczenia” na dwie kategorie:\n- {podklasa} (dziecko) - klasa, która dziedziczy z innej klasy\n- {nadklasa} (rodzic) - klasa, z której dziedziczy się\nAby dziedziczyć po klasie, użyj {extends}.",
                    "code": "class Vehicle {\n  protected String brand = \"Ford\";\n\n  public void honk() {\n    System.out.println(\"Tuut, tuut!\");\n  }\n}\n\nclass Car extends Vehicle {\n  private String modelName = \"Mustang\";\n\n  public static void main(String[] args) {\n    Car myCar = new Car();\n    myCar.honk();\n\n    System.out.println(myCar.brand + \" \" + myCar.modelName);\n  }\n}",
                    "output": "Tuut, tuut!\nFord Mustang",
                    "codeDescription": "Ustawiamy atrybut {brand} w klasie {Vehicle} na {protected}. Gdyby był ustawiony na {private}, klasa Car nie miałaby do niego dostępu."
                },
                {
                    "header": "Po co używać dziedziczenia?",
                    "description": "",
                    "code": "",
                    "output": "",
                    "codeDescription": "Jest to przydatne w przypadku ponownego wykorzystania kodu: ponowne wykorzystanie {atrybutów} i {metod} istniejącej klasy podczas tworzenia nowej klasy\nJeśli nie chcesz, aby inne klasy dziedziczyły z jednej klasy oznacz klasę jako {final}"
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Polimorfizm w Javie",
                    "description": "{Polimorfizm} oznacza „wiele form” i ma miejsce wtedy, gdy mamy wiele klas, które są ze sobą powiązane poprzez {dziedziczenie}.\nJak opisaliśmy w poprzednim rozdziale; {Dziedziczenie} pozwala nam dziedziczyć atrybuty i metody z innej klasy. {Polimorfizm} wykorzystuje te metody do wykonywania różnych zadań. Dzięki temu możemy wykonać jedną akcję na różne sposoby.\nPomyślmy na przykład o {nadklasie} o nazwie {Animal}, która ma metodę o nazwie {AnimalSound()}. {Podklasami} zwierząt mogą być świnie, koty, psy, ptaki - mają one również własną implementację dźwięków zwierzęcych (krowa muczy, kot miauczy itp.)",
                    "code": "class Animal {\n  public void animalSound() {\n    System.out.println(\"Zwierzę wydaje dźwięk\");\n  }\n}\n\nclass Cow extends Animal {\n  public void animalSound() {\n    System.out.println(\"Krowa robi: muu muu\");\n  }\n}\n\nclass Cat extends Animal {\n  public void animalSound() {\n    System.out.println(\"Kot robi: miau miau\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Animal myAnimal = new Animal();\n    Animal myPig = new Pig();\n    Animal myDog = new Dog();\n    myAnimal.animalSound();\n    myPig.animalSound();\n    myDog.animalSound();\n  }\n}",
                    "output": "Zwierzę wydaje dźwięk\nZwierzę wydaje dźwięk\nKot robi: miau miau",
                    "codeDescription": "Polimorfizm jest przydatny do ponownego użycia kodu: ponowne wykorzystanie atrybutów i metod istniejącej klasy podczas tworzenia nowej klasy."
                },
                {
                    "header": "",
                    "description": "",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Zagnieżdżone klasy",
                    "description": "W Javie możliwe jest także {zagnieżdżanie klas} (klasa w klasie). Celem {klas zagnieżdżonych} jest grupowanie klas, które do siebie pasują, co czyni kod bardziej czytelnym i łatwym w utrzymaniu.",
                    "code": "class OuterClass {\n  int x = 10;\n\n  class InnerClass {\n    int y = 5;\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    OuterClass myOuter = new OuterClass();\n    OuterClass.InnerClass myInner = myOuter.new InnerClass();\n    System.out.println(myInner.y + myOuter.x);\n  }\n}",
                    "output": "15",
                    "codeDescription": "Zwróć uwagę na sposób tworzenia obiektu klasy zagnieżdżonej"
                },
                {
                    "header": "Modyfikatory klas zagnieżdżonych",
                    "description": "W przeciwieństwie do zwykłych klas, {klasy zagnieżdżone} mogą mieć takie modyfikatory jak {private{, {protected} oraz {static}.\nIch działanie jest takie samo jak dla atrybutów i metod.\nGdybyśmy w powyższym kodzie dodali modyfikator {private} do {zagnieżdżonej klasy} wystąpiłby błąd.",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "Dostęp do klasy zewnętrznej z klasy zagnieżdżonej",
                    "description": "Jedną z zalet {klas zagnieżdżonych} jest to, że mają one dostęp do atrybutów i metod klasy zewnętrznej",
                    "code": "class OuterClass {\n  int x = 10;\n\n  class InnerClass {\n    public int myInnerMethod() {\n      return x;\n    }\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    OuterClass myOuter = new OuterClass();\n    OuterClass.InnerClass myInner = myOuter.new InnerClass();\n    System.out.println(myInner.myInnerMethod());\n  }\n}",
                    "output": "10",
                    "codeDescription": "Tak samo jak {statyczne} metody oraz atrybuty, {statyczna} klasa zagnieżdżona nie ma dostępu do pól klasy zewnętrznej"
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Metody i klasy abstrakcyjne",
                    "description": "{Abstrakcja danych} to proces ukrywania pewnych szczegółów i pokazywania użytkownikowi jedynie niezbędnych informacji.\n{Abstrakcję} można osiągnąć za pomocą {klas abstrakcyjnych} lub {interfejsów} (o czym dowiesz się więcej w następnym rozdziale).\n{abstract} jest modyfikatorem braku dostępu, używanym w klasach i metodach:\n- {Klasa abstrakcyjna}: jest klasą zastrzeżoną, której nie można używać do tworzenia obiektów (można uzyskać do niej dostęp poprzez dziedziczenie).\n- {Metoda abstrakcyjna}: może być używana tylko w klasie abstrakcyjnej i nie ma treści. Ciało jest dostarczane przez podklasę ({dziedziczenie}).",
                    "code": "abstract class Animal {\n  public abstract void animalSound();\n  public void sleep() {\nSystem.out.println(\"Zzz\");\n  }\n}",
                    "output": "",
                    "codeDescription": "Nie można stworzyć obiektu klasy abstrakcyjnej"
                },
                {
                    "header": "",
                    "description": "Aby uzyskać dostęp do klasy abstrakcyjnej, należy ją odziedziczyć z innej klasy.",
                    "code": "abstract class Animal {\n  public abstract void animalSound();\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}\n\nclass Cat extends Animal {\n  public void animalSound() {\n    System.out.println(\"Kot robi: miau miau\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Pig myPig = new Pig();\n    myPig.animalSound();\n    myPig.sleep();\n  }\n}",
                    "output": "Kot robi: miau miau\nZzz",
                    "codeDescription": "Abstrakcji używa się dla bezpieczeństwa, ukrywa się wszelkie detale i pokazuje się tylko ważne elementy obiektu"
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Interfejsy",
                    "description": "Aby uzyskać abstrakcję w Javie możemy użyć {interfejsów}.\n{interface} jest całkowicie \"{abstrakcyjną klasą}\" używaną do grupowania samych definicji metod.",
                    "code": "interface Animal {\n  public void animalSound(); // nie posiada ciała\n  public void run(); // nie posiada ciała\n}",
                    "output": "",
                    "codeDescription": "Metody w {interfejsie domyślnie mają modyfikatory {abstract} i {public}\nAtrybuty w {interfejsie} domyślnie modyfikatory {public}, {static} i {final}\nPo implementacji {interfejsu}, należy przeciążyć wszystkie jego metody"
                },
                {
                    "header": "",
                    "description": "Żeby móc skorzystać z metod w {interfejsie} należy go \"zaimplementować\" (coś podobnego do dziedziczenia) używając {implements} (zamiast {extends}). Ciało metod w {interfejsie} zapewnia klasa która implementuje ten {interfejs}",
                    "code": "interface Animal {\n  public void animalSound();\n  public void sleep();\n}\n\nclass Cat extends Animal {\n  public void animalSound() {\n    System.out.println(\"Kot robi: miau miau\");\n  }\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Pig myPig = new Pig();\n    myPig.animalSound();\n    myPig.sleep();\n  }\n}",
                    "output": "Kot robi: miau miau\nZzz",
                    "codeDescription": "Klasy w Javie mogą implementować wiele {interfejsów} naraz, natomiast mogą dziedziczyć tylko z jednej klasy."
                }
            ]
        },
        {
            "page": [
                {
                    "header": "Enum",
                    "description": "{enum} jest specjalną klasą, która reprezentuje grupę stałych (zmienne {final}).\nZa pomocą {enum} możemy utworzyć taką klasę i oddzielić stałe za pomocą przecinka. Te stałe powinny być napisane z dużych liter.",
                    "code": "enum Level {\n  LOW,\n  MEDIUM,\n HIGH\n}",
                    "output": "",
                    "codeDescription": "{enum} jest skrótem od \"enumerations\""
                },
                {
                    "header": "Enum wewnątrz klasy",
                    "description": "Typ {enum} możesz zawrzeć wewnątrz klasy.",
                    "code": "public class Main {\n  enum Level {\n    LOW,\n    MEDIUM,\n    HIGH\n  }\n\n  public static void main(String[] args) {\n    Level myVar = Level.MEDIUM;\n    System.out.println(myVar);\n  }\n}",
                    "output": "",
                    "codeDescription": "{enum} {nie} może {dziedziczyć} z innych klas, ale może {implementować} interfejsy\n{enum} nie może zostać użyty do tworzenia obiektu\nZwróć uwagę w jaki sposób odwołujemy się do stałych w {enumie}."
                }
            ]
        },
        {
            "page": [
                {
                    "header": "",
                    "description": "",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "",
                    "description": "",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                }
            ]
        },
        {
            "page": [
                {
                    "header": "",
                    "description": "",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "",
                    "description": "",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                }
            ]
        },
        {
            "page": [
                {
                    "header": "",
                    "description": "",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "",
                    "description": "",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                }
            ]
        },
        {
            "page": [
                {
                    "header": "",
                    "description": "",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                },
                {
                    "header": "",
                    "description": "",
                    "code": "",
                    "output": "",
                    "codeDescription": ""
                }
            ]
        }
    ]
}